import picamera
import picamera.array
import cv2
import pickle

# Camera resolution
Camera_Resulution_Width = 2028
Camera_Resulution_Height = 1520

# Conveyor belt dimensions
Conveyor_Belt_Width = 2028
Conveyor_Belt_Height = 1520

Min_Contour_Area = 20000


# Create a new camera object
camera = picamera.PiCamera()

# Set the shutter speed to 1/100th of a second
camera.shutter_speed = 1000

# Set the ISO to 800
camera.iso = 800

# Allow time for the camera to adjust to the new settings
camera.exposure_mode = 'off'
camera.start_preview()
camera.exposure_mode = 'auto'
camera.awb_mode = 'auto'
camera.exposure_compensation = 0

# Set the preview resolution to match the OpenCV image resolution
camera.resolution(Camera_Resulution_Width, Camera_Resulution_Height)


with picamera.array.PiRGBArray(camera, size=(Camera_Resulution_Width, Camera_Resulution_Height)) as output:
    # capture frames from the camera
    for frame in camera.capture_continuous(output, format='bgr', use_video_port=True):
        
        # convert the captured frame to an OpenCV image
        image = frame.array
        cameraMatrix, dist = pickle.load(open("UR10 Conveyor Belt Project/calibration.pkl", "rb"))
        image = cv2.undistort(image, cameraMatrix, dist, None)

        # Process the image to detect objects on the conveyor belt
        belt = image[0:Conveyor_Belt_Height, 0:Conveyor_Belt_Width]
        gray_belt = cv2.cvtColor(belt, cv2.COLOR_BGR2GRAY)
        _, threshold = cv2.threshold(gray_belt, 180, 255, cv2.THRESH_BINARY)
        
        # Detect the objects
        contours, hierarchy = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for cnt in contours:
            (x, y, w, h) = cv2.boundingRect(cnt)
            
            # Calculate area
            area = cv2.contourArea(cnt)
            perimeter = cv2.arcLength(cnt, True)

            # Calculate approximate polygonal curve
            approx = cv2.approxPolyDP(cnt, 0.01 * perimeter, True)

            # Draw contour and polygon on original image
            if area > Min_Contour_Area:
                cv2.drawContours(image, [cnt], -1, (0, 255, 0), 4)           
                cv2.putText(belt, str(area), (x, y), 1, 3, (0, 255, 0))
            #cv2.rectangle(belt, (x, y), (x + w, y + h), (255, 0, 0), 2)
        
        
        # display the image using OpenCV
        cv2.imshow("Frame", image)
        #cv2.imshow("Belt", threshold)
        
        # clear the stream for the next frame
        output.truncate(0)

