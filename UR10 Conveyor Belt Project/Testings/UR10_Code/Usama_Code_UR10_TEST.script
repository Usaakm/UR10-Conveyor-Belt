def Usama_Code_UR10_TEST():
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.177,0.0,0.0,0.0])
  set_payload(0.62, [0.0, 0.0, 0.09])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_runstate_standard_digital_output_to_value(7, 2)
  set_tool_voltage(12)
  step_count_2d24975f_db03_44ed_beee_cb214a245349 = 0.0
  thread Step_Counter_Thread_350931ec_64d2_4f4a_853f_59d4e6083f30():
    while (True):
      step_count_2d24975f_db03_44ed_beee_cb214a245349 = step_count_2d24975f_db03_44ed_beee_cb214a245349 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_350931ec_64d2_4f4a_853f_59d4e6083f30()
  global i_z_start=100
  global Conveyor=p[-0.6004473279455352,-0.263741565334468,0.015939600744130977,0.09575441144599209,-0.08867357457834127,-1.568576085925291]
  global table=p[0.260641832324878,0.5800637745710332,0.028009748668278572,0.558374120907397,3.0911728006228736,-5.53707866320477E-4]
  encoder_enable_pulse_decode(0, 1, 0, 1)
  def start_conveyor_tracking0():
    track_conveyor_linear(pose_sub(p[0.8268537208189045,-0.45437899628813316,-0.1663478175542951,-3.134731863517781,-0.20159235158378952,-2.68345437497033E-4], p[-0.8539403151199703,-0.46210801269858565,-0.1603226202019039,-3.134793549007148,-0.20162972403430834,-3.590269980813882E-4]), 13333, 0)
  end
  rtde_set_watchdog("speed_slider_mask", 10.0, "ignore")
  # begin: URCap Installation Node
  #   Source: SMC Vacuum Gripper Unit, 1.0.0, SMC Corporation.
  #   Type: SMC Vacuum Gripper Unit
  thValRawVoltage = 0
  vacuumUnitIsMonitoring = False
  vacuumUnitAdsorbLevel = 0
  thread threadVacuumMonitor():
    while (True):
      if (vacuumUnitIsMonitoring == True):
        if (vacuumUnitAdsorbLevel != 0):
          thValCheckTime = 100
          thValWaitTime = 0
          thValCurrentLevel = 0
          while (vacuumUnitAdsorbLevel < thValCurrentLevel):
            thValRawVoltage = get_tool_analog_in(0)
            thValCurAna = thValRawVoltage - 1
            thValVoltage = thValCurAna / 0.9145
            if (thValVoltage < 0):
              thValCurrentLevel = 0
            elif (thValVoltage > 4):
              thValCurrentLevel = -101
            else:
              thValCurrentLevel = -(thValVoltage * 25.25)
            end
            thValWaitTime = thValWaitTime+1
            if (thValWaitTime > thValCheckTime):
              set_standard_digital_out(5, False)
              set_standard_digital_out(7, True)
              popup("Air leakage detected on workpiece.", error = True, blocking = False)
              halt
            end
            sync()
          end
        end
      end
      sync()
    end
  end
  threadVacuumMonitorHandle = run threadVacuumMonitor()
  # end: URCap Installation Node
  def Initialize():
    $ 18 "Initialize" "noBreak"
    $ 19 "MoveJ"
    $ 20 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(p[-.451154755052, -.752968774117, .124773726248, -2.923765600523, 1.080615064566, .096841454447], qnear=[0.860284209251404, -1.1044934431659144, 1.6700482368469254, -2.105380837117334, -1.6426342169391077, -3.1415926535897913]), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: SMC Vacuum Gripper Unit, 1.0.0, SMC Corporation.
    #   Type: SMC Vacuum Gripper Unit
    $ 21 "Release : SMC Vacuum gripper unit"
    vacuumUnitIsMonitoring = False
    vacuumUnitAdsorbLevel = 0
    set_standard_digital_out(5, False)
    set_standard_digital_out(6, False)
    set_standard_digital_out(7, False)
    set_tool_digital_out(0, False)
    set_tool_digital_out(1, True)
    vacuumBreakTime = 50
    blowOffWaitTime = 0
    while (blowOffWaitTime < vacuumBreakTime):
      blowOffWaitTime = blowOffWaitTime+1
      sync()
    end
    set_tool_digital_out(0, False)
    set_tool_digital_out(1, False)
    set_payload_mass(0.0)
    # end: URCap Program Node
  end
  def Orin_Variables():
    $ 22 "Orin_Variables" "noBreak"
    $ 23 "socket_open('192.168.0.3', 50000, 'Orin_Encoder_Target')"
    socket_open("192.168.0.3", 50000, "Orin_Encoder_Target")
    $ 24 "data≔socket_read_ascii_float(2, 'Orin_Encoder_Target')"
    global data=socket_read_ascii_float(2, "Orin_Encoder_Target")
    $ 25 "Y≔data[1]"
    global Y=data[1]
    $ 26 "Encoder_Target≔data[2]"
    global Encoder_Target=data[2]
    $ 30 "Y≔Y / 1000"
    global Y=Y / 1000
    $ 31 "socket_close('Orin_Encoder_Target')"
    socket_close("Orin_Encoder_Target")
  end
  def Picking():
    $ 32 "Picking" "noBreak"
    $ 35 "movej(p[-0.6, Y,  0.01, -3.02037, 0.59482, -0.03077], a  = accel, v = vel)"
    movej(p[-0.6, Y,  0.01, -3.02037, 0.59482, -0.03077], a  = accel, v = vel)
    $ 36 "Wait Encoder_Count ≥Encoder_Target"
    while (not(Encoder_Count  >= Encoder_Target)):
      sync()
    end
    $ 37 "Tracking Conveyor 1"
    start_conveyor_tracking0()
    $ 38 "current_pose= get_target_tcp_pose()" "noBreak"
    current_pose=  get_target_tcp_pose ()
    $ 39 "new_pose≔p[current_pose[0], current_pose[1], current_pose[2] - 0.017, current_pose[3], current_pose[4], current_pose[5]]" "noBreak"
    global new_pose=p[current_pose[0], current_pose[1], current_pose[2] - 0.017, current_pose[3], current_pose[4], current_pose[5]]
    $ 40 "movej(new_pose, a= accel, v = vel)" "noBreak"
    movej(new_pose, a= accel, v = vel)
    # begin: URCap Program Node
    #   Source: SMC Vacuum Gripper Unit, 1.0.0, SMC Corporation.
    #   Type: SMC Vacuum Gripper Unit
    $ 41 "Adsorb : SMC Vacuum gripper unit" "noBreak"
    vacuumUnitIsMonitoring = False
    vacuumUnitAdsorbLevel = 0
    set_standard_digital_out(5, False)
    set_standard_digital_out(6, False)
    set_standard_digital_out(7, False)
    set_tool_digital_out(0, True)
    set_tool_digital_out(1, False)
    set_payload_mass(0.05)
    # end: URCap Program Node
    stop_conveyor_tracking()
  end
  def Place():
    $ 54 "Place" "noBreak"
    $ 55 "MoveJ"
    $ 56 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(p[-.829877684988, .242734942612, .423376555289, -1.632666946801, 2.615970239940, .050047585746], qnear=[-0.4582927862750452, -1.2637665907489222, 1.3403005599975586, -1.613382641469137, -1.6422870794879358, -3.1401341597186487]), a=1.7453292519943295, v=1.7453292519943295)
    $ 57 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(p[-.829879963766, .285880468770, .029908365977, -1.572724609911, 2.653139578639, .052051080706], qnear=[-0.5023611227618607, -1.0153029600726526, 1.729678630828858, -2.254271332417625, -1.642586056386131, -3.141592653589793]), a=1.7453292519943295, v=1.7453292519943295)
    $ 59 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(p[-.829857828235, .285966482247, .227061357782, -1.574200456620, 2.652198933433, .052187178289], qnear=[-0.5027087370501953, -1.1774752775775355, 1.5775914192199698, -1.9400194326983824, -1.642622296010141, -3.141592653589793]), a=1.7453292519943295, v=1.7453292519943295)
    $ 60 "set_digital_out(3,  False )"
    set_digital_out(3,   False  )
  end
  $ 61 "Thread_1"
  thread Thread_1():
    while (True):
      $ 62 "socket_open('192.168.0.3', 50001, 'Orin_Encoder')"
      socket_open("192.168.0.3", 50001, "Orin_Encoder")
      $ 63 "Loop"
      while (True):
        $ 64 "Encoder_Count≔encoder_get_tick_count(0)"
        global Encoder_Count=encoder_get_tick_count(0)
        $ 65 "socket_send_line(Encoder_Count, 'Orin_Encoder')"
        socket_send_line(Encoder_Count, "Orin_Encoder")
        $ 66 "Wait: 0.05"
        sleep(0.05)
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 67 "Thread_2"
  thread Thread_2():
    while (True):
      $ 68 "radius≔0.048"
      global radius=0.048
      $ 69 "enc_resolution≔13333"
      global enc_resolution=13333
      $ 70 "dis_per_cnt≔100.0 / enc_resolution"
      global dis_per_cnt=100.0 / enc_resolution
      $ 71 "socket_open('192.168.0.3', 50002, 'Orin_Speed')"
      socket_open("192.168.0.3", 50002, "Orin_Speed")
      $ 72 "Loop"
      while (True):
        $ 73 "initial_count≔encoder_get_tick_count(0)"
        global initial_count=encoder_get_tick_count(0)
        $ 74 "Wait: 0.5"
        sleep(0.5)
        $ 75 "final_count≔encoder_get_tick_count(0)"
        global final_count=encoder_get_tick_count(0)
        $ 76 "change_count≔final_count - initial_count"
        global change_count=final_count - initial_count
        $ 78 "CM_S≔(change_count * dis_per_cnt ) /0.5"
        global CM_S=(change_count * dis_per_cnt ) /0.5
        $ 79 "socket_send_line(CM_S, 'Orin_Speed')"
        socket_send_line(CM_S, "Orin_Speed")
      end
    end
  end
  threadId_Thread_2 = run Thread_2()
  while (True):
    $ 2 "Robot Program"
    $ 3 "accel≔1"
    global accel=1
    $ 4 "Y≔0"
    global Y=0
    $ 6 "vel≔1"
    global vel=1
    $ 7 "set_tool_voltage(24)"
    set_tool_voltage(24)
    $ 8 "Call Initialize"
    Initialize()
    $ 14 "If digital_out[3] ==  True "
    global thread_flag_14=0
    thread Thread_if_14():
      $ 15 "Call Orin_Variables"
      Orin_Variables()
      $ 16 "Call Picking"
      Picking()
      $ 17 "Call Place"
      Place()
      thread_flag_14 = 1
    end
    if (get_standard_digital_out(3) ==   True  ):
      global thread_handler_14=run Thread_if_14()
      while (thread_flag_14 == 0):
        if not(get_standard_digital_out(3) ==   True  ):
          kill thread_handler_14
          thread_flag_14 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_14 = 2
    end
  end
end
